from flask.ext.restful import Resourcefrom flask import jsonifyimport psutilimport platformimport Convertor# function to get system info based on psutildef getMachineInfo():    machineInfo = {}    if "linux" in platform.system():        machineInfo["machine_name"] = "linux"    else:        info = platform.uname()         machineInfo["machine_name"] = info[1]        machineInfo["system_version"] = "{0} {1} {2}".format(info[0], info[2], info[4])    machineInfo["up_time"] = Convertor.intToDate(psutil.boot_time())        return machineInfodef getCpuInfo():    cpuInfo = {}    cpuInfo["physical_core"] = psutil.cpu_count(logical=False)    cpuInfo["logical_core"] = psutil.cpu_count()    cpu_percent_percore  = psutil.cpu_percent(interval=0.1, percpu=True)    cpuInfo["cpu_percent"] = []    for index, percent in enumerate(cpu_percent_percore):        corePercentInfo = {}        corePercentInfo["core"] = index +1        corePercentInfo["percent"] = percent        cpuInfo["cpu_percent"].append(corePercentInfo)        return cpuInfo        def getMemoryInfo():    memoryInfo = {}    virtual_memory = psutil.virtual_memory()    memoryInfo["virtual_memory_total"] = Convertor.bytes2human(virtual_memory.total)    memoryInfo["virtual_memory_available"] = Convertor.bytes2human(virtual_memory.available)    memoryInfo["virtual_memory_percent"] = virtual_memory.percent    memoryInfo["virtual_memory_used"] = Convertor.bytes2human(virtual_memory.used)    memoryInfo["virtual_memory_free"] = Convertor.bytes2human(virtual_memory.free)    if "linux" in platform.system():        memoryInfo["virtual_memory_active"] = virtual_memory.active        memoryInfo["virtual_memory_inactive"] = virtual_memory.inactive        memoryInfo["virtual_memory_buffers"] = virtual_memory.buffers        memoryInfo["virtual_memory_cached"] = virtual_memory.cached        swap_memory = psutil.swap_memory()    memoryInfo["swap_memory_total"] = Convertor.bytes2human(swap_memory.total)    memoryInfo["swap_memory_used"] = Convertor.bytes2human(swap_memory.used)    memoryInfo["swap_memory_free"] = Convertor.bytes2human(swap_memory.free)    memoryInfo["swap_memory_percent"] = swap_memory.percent    memoryInfo["swap_memory_sin"] = Convertor.bytes2human(swap_memory.sin)    memoryInfo["swap_memory_sout"] = Convertor.bytes2human(swap_memory.sout)        return memoryInfo        def getDiskInfo():    diskInfo = {}    diskInfo["partitions"] = []    partitions = psutil.disk_partitions()     for partition in partitions:        if "cdrom" in partition.opts or partition.fstype == "":            continue        partitionInfo = {}        partitionInfo["device"] = partition.device        partitionInfo["mountpoint"] = partition.mountpoint        partitionInfo["fstype"] = partition.fstype        partitionInfo["opts"] = partition.opts                diskUsage = psutil.disk_usage(partition.device)        partitionInfo["total"] = Convertor.bytes2human(diskUsage.total)        partitionInfo["used"] = Convertor.bytes2human(diskUsage.used)        partitionInfo["free"] = Convertor.bytes2human(diskUsage.free)        partitionInfo["percent"] = diskUsage.percent                diskInfo["partitions"].append(partitionInfo)    return diskInfo    def getDiskIOCounters():    diskIOCounters = {}    diskIOCounters["diskIOs"] = []    disk_io_counters = psutil.disk_io_counters(perdisk = True)    for disk, disk_io_counter in disk_io_counters.items():        temp = {}        temp["disk"] = disk        temp["read_count"] = disk_io_counter[0]        temp["write_count"] = disk_io_counter[1]        temp["read_bytes"] = Convertor.bytes2human(disk_io_counter[2])        temp["write_bytes"] = Convertor.bytes2human(disk_io_counter[3])        temp["read_time"] = disk_io_counter[4]        temp["write_time"] = disk_io_counter[5]                diskIOCounters["diskIOs"].append(temp)    return diskIOCounters        def getProcessInfo(pid):    processInfo = {}    processInfo["processes"] = []        for proc in psutil.process_iter():        try:            pinfo = proc.as_dict(attrs=["pid", "name", "ppid", "username", "create_time", "cpu_percent", "memory_percent", "io_counters"])        except psutil.NoSuchProcess:            pass        else:            if pid > -1 and pinfo["pid"] != pid:                continue            pinfo["create_time"] = Convertor.intToDate(pinfo["create_time"])            pinfo["memory_percent"] = round(pinfo["memory_percent"], 1)            pinfo["read_count"] = pinfo["io_counters"][0]            pinfo["write_count"] = pinfo["io_counters"][1]            pinfo["read_size"] = Convertor.bytes2human(pinfo["io_counters"][2])            pinfo["write_size"] = Convertor.bytes2human(pinfo["io_counters"][3])            processInfo["processes"].append(pinfo)    return processInfo           # REST api resources    class MachineInfo(Resource):    def get(self):        return getMachineInfo()        class CpuInfo(Resource):    def get(self):        return getCpuInfo()        class MemoryInfo(Resource):    def get(self):        return getMemoryInfo()        class DiskInfo(Resource):    def get(self):        getDiskInfo()class DiskIOConters(Resource):    def get(sel):        getDiskIOCounters()   class ProcessInfo(Resource):    def get(self, pid):         return getProcessInfo(pid)                     class SystemInfo(Resource):    def get(self):        systemInfo = {}        systemInfo["machineInfo"] = getMachineInfo()        systemInfo["cpuInfo"] = getCpuInfo()        systemInfo["memoryInfo"] = getMemoryInfo()        systemInfo["diskInfo"] = getDiskInfo()        systemInfo["diskIOCounters"] = getDiskIOCounters()        systemInfo["processInfo"] = getProcessInfo(-1)                return systemInfo                   